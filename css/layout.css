/*
    The "page wrapper" is the outermost container for the page. It mimics
    the behavior of the body tag, but is a div so that it can be styled
    with more flexibility than the body tag.
*/
.page-wrapper {
    min-height: 100vw; /* mimics the body */
    display: flex; /* default = vertical */
    flex-direction: column; /* so we change it :) */
}

    /*
        The "container", sometimes referred to as a "section", is a container
        element (semantic when applicable) that vertically separates different
        areas on the page based on their purpose or topic. It can allow different
        background colors and properties for each section that help users associate
        content within it as belonging to the same subject.
        Always want this CENTERED.
    */
.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    row-gap: 20px; /* apply to parent and affects children */
}
/* Combo classes to extend the container's versatility */
.container.grow {
    flex: 1 0 0; /* just makes sure that it grows (grow, shrink, basis) */
}
.container.justify-center { /* aligns CHILDREN in the center (optional, ex: big hero scene in the center) */
    justify-content: center;
}

    /*
        The "row" is a container element that horizontally separates its
        children, which are usually columns. It also performs a secondary role
        of keeping the content of the site within a reasonable width, so that
        wider screens don't disrupt the intended layout.
        Establish and standardize width size. BASE CLASS / 95% use case
    */
.row {
    width: 100%; /* grow as large as the parent will allow */
    display: flex;
    max-width: 1100px; /* tells it where it stops (standard width for many viewports) */
    gap: 20px; /* natural gap between the columns, apply to parent and affects children */
    padding: 0 20px;
}
/* Combo classes to extend the row's versatility */
.row.full-width { /* don't want it to stop at the maximum site content */
    max-width: unset;
}
.row.align-center { /*  */
    align-items: center;
}
.row.align-top {
    align-items: start;
}
.row.align-bottom {
    align-items: end;
}
.row.text-center {
    text-align: center;
}
.row.justify-center { /*  */
    justify-content: center;
}
.row.justify-right {
    justify-content: end;
}
.row.justify-space-between { /*  */
    justify-content: space-between;
}
.row.no-padding { /*  */
    padding: unset;
}
.row.no-gap {
    gap: unset;
}
.row.grow {
    flex: 1 0 0;
}

    /*
        The "column" is a container element that vertically separates its
        children, which are usually content elements. When paired with sibling columns,
        it allows for the creation of a flexible grid system that can be used
        to create a variety of layouts.
    */
.column {
    display: flex;
    flex-direction: column;
    flex: 1 0 0;
}

/* Combo classes to extend the column's versatility */
.column.shrink { /* don't share space with your siblings */
    flex: 0 1 auto;
}
.column.text-center { /* centers all text within column, whether children or not */
    text-align: center;
}
.column.align-center {
    align-items: center;
}
.column.align-right {
    align-items: end;
}
.column.justify-center {
    justify-content: center;
}
.column.justify-space-between {
    justify-content: space-between;
}














